{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","Input","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","console","log","Date","now","TodoItem","Checkbox","props","checked","App","useSelector","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAMMA,EAAYC,YAAY,CAC1BC,KAAM,QACNC,aANiB,CACjBC,SAAU,IAMVC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMH,SAASK,KAAKD,EAAOE,UAI/BC,SAAU,SAACJ,EAAOC,GACdD,EAAMH,SAASQ,KAAI,SAAAC,GACZL,EAAOE,UAAYG,EAAKC,MACN,IAAdD,EAAKE,KACJF,EAAKE,MAAO,EAEZF,EAAKE,MAAO,U,EAQEf,EAAUgB,QAAjCV,E,EAAAA,SAAUK,E,EAAAA,SAEZM,EAAiB,SAAAV,GAAK,OAAIA,EAAMW,MAAMd,UAEpCJ,IAAf,Q,OCHemB,EAxBD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAEVC,EAAWC,cAcjB,OACI,sBAAKC,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAAAC,GAAC,OAAGP,EAASO,EAAEC,OAAOH,UACjE,wBAAQI,QAfA,WACZC,QAAQC,IAAR,iBAAsBZ,IAEtBE,EAASjB,EAAS,CACdO,KAAMQ,EACNN,MAAM,EACND,GAAIoB,KAAKC,UAST,uB,gBCCGC,G,MApBG,SAAC,GAAsB,IAArBlC,EAAoB,EAApBA,KAAMa,EAAc,EAAdA,KAAMD,EAAQ,EAARA,GACtBuB,EAAW,SAAAC,GAAK,OAClB,mCAAOZ,KAAK,YAAeY,KAEvBf,EAAWC,cAOnB,OACI,qBAAKC,UAAU,WAAf,SAEC,sCAAQ,cAACY,EAAD,CAAUE,QAASxB,EAAMa,SAPhB,WAClBL,EAASZ,EAASG,OAOd,mBAAGW,UAAWV,GAAQ,iBAAtB,SAAyCb,WCwBtCsC,MAnCf,WAEA,IAAMpC,EAAWqC,YAAYxB,GAE3B,OACE,sBAAKQ,UAAU,MAAf,UACI,qBAAKA,UAAU,OAAf,SACE,6CAIF,qBAAKA,UAAY,iBAAjB,SACE,qBAAKA,UAAY,qBAAjB,SAEMrB,EAASQ,KAAI,SAAAC,GAAI,OAEf,cAAC,EAAD,CACAX,KAAMW,EAAKA,KACXE,KAAMF,EAAKE,KACXD,GAAID,EAAKC,YAWnB,cAAC,EAAD,QCpCO4B,cAAe,CAC5BC,QAAS,CACRzB,MAAO0B,KCMUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eebd3e5b.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    todoList: []\n}\n\nconst todoSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        saveTodo: (state, action) => {\n            state.todoList.push(action.payload)\n\n        },\n\n        setCheck: (state, action) => {\n            state.todoList.map(item => { \n                if(action.payload === item.id){\n                    if(item.done === true){\n                        item.done = false\n                    }else{\n                        item.done = true\n                    }\n                }\n            })\n        }\n    }\n});\n\nexport const { saveTodo, setCheck } = todoSlice.actions\n\nexport const selectTodoList = state => state.todos.todoList\n\nexport default todoSlice.reducer","import React, { useState } from 'react';\nimport './Input.css';\nimport { useDispatch } from 'react-redux';\nimport { saveTodo } from '../features/todoSlice';\n\n\nconst Input = () => {\n    const [input, setInput] = useState('')\n    const dispatch = useDispatch()\n\n    const addTodo = () => {\n        console.log(`adding ${input}`)\n\n        dispatch(saveTodo({\n            item: input,\n            done: false, \n            id: Date.now()\n\n        }))\n\n    }\n\n    return (\n        <div className='input'>\n            <input type='text' value={input} onChange={e=> setInput(e.target.value)}/>\n            <button onClick={addTodo}> Add </button> \n        </div>\n    )\n}\n\nexport default Input;\n","import React from 'react';\nimport './TodoItem.css';\nimport {useDispatch} from 'react-redux';\nimport {setCheck} from '../features/todoSlice';\n\n\nconst  TodoItem = ({name, done, id}) => {\n    const Checkbox = props => (\n        <input type=\"checkbox\" {...props} />\n      )\n      const dispatch = useDispatch()\n\n\n      const handleCheck = () => {\n        dispatch(setCheck(id))\n    }\n    \n    return (\n        <div className='todoItem'>\n            \n         <label> <Checkbox checked={done} onChange={handleCheck} /> \n            <p className={done && 'todoItem--done'}>{name}</p></label>\n        </div>\n    )\n}\n\nexport default TodoItem;\n","import React from 'react';\r\nimport Input from './components/Input';\r\nimport './App.css';\r\nimport './components/TodoItem'\r\nimport TodoItem from './components/TodoItem';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectTodoList} from './features/todoSlice'\r\n\r\n\r\n\r\nfunction App() {\r\n\r\nconst todoList = useSelector(selectTodoList)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className='head'>\r\n          <h1>To Do App</h1>\r\n          </div>\r\n        \r\n        {/*Todolist*/}\r\n        <div className = 'App__container'>\r\n          <div className = 'App__todoContainer'>\r\n              {\r\n                todoList.map(item => (\r\n\r\n                  <TodoItem \r\n                  name={item.item}\r\n                  done={item.done}\r\n                  id={item.id}\r\n                  />\r\n                ) )  \r\n\r\n\r\n\r\n              }\r\n            </div>\r\n          </div>\r\n        {/*done*/}\r\n        {/*input*/}\r\n        <Input />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer   from '../features/todoSlice'\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n   todos: todoReducer\r\n  },\r\n});\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}